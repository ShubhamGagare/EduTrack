generator client {
  provider      = "prisma-client-js"
  output        = "./generated/client"
  seed          = "node seed.js"
  engineType    = "binary"
  binaryTargets = ["native", "linux-arm64-openssl-1.0.x","rhel-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id       Int      @id @default(autoincrement())
  username String
  email    String   @unique
  password String
  roleId   Int
  Student  Student?
  Teacher  Teacher?
  role     Role     @relation(fields: [roleId], references: [id])
}

model Role {
  id   Int    @id @default(autoincrement())
  name String @unique @default("User")
  User User[]
}

model Teacher {
  id       Int        @id @default(autoincrement())
  userId   Int        @unique
  classes  Cls[]
  Register Register[]
  user     User       @relation(fields: [userId], references: [id])
}

model Student {
  id                 Int                  @id @default(autoincrement())
  userId             Int                  @unique
  classId            Int
  Attendance         Attendance[]
  cls                Cls                  @relation(fields: [classId], references: [id])
  user               User                 @relation(fields: [userId], references: [id])
  SeatingArrangement SeatingArrangement[]
}

model Cls {
  id          Int           @id @default(autoincrement())
  name        String
  teacherId   Int?
  teacher     Teacher?      @relation(fields: [teacherId], references: [id])
  register    Register[]
  students    Student[]
  timetable   Timetable[]
  seatingPlan SeatingPlan[]
  ClassView   ClassView[]
  layouts     Layout[]      @relation("ClassLayouts")
}

model Timetable {
  id        Int      @id @default(autoincrement())
  classId   Int
  day       String
  startTime DateTime
  endTime   DateTime
  cls       Cls      @relation(fields: [classId], references: [id])
}

model Register {
  id         Int          @id @default(autoincrement())
  classId    Int
  teacherId  Int
  date       DateTime
  status     String       @default("")
  Attendance Attendance[]
  cls        Cls          @relation(fields: [classId], references: [id])
  teacher    Teacher      @relation(fields: [teacherId], references: [id])
}

model Attendance {
  id          Int      @id @default(autoincrement())
  studentId   Int
  registerId  Int
  status      String
  comment     String?
  lateMinutes Int?
  date        DateTime @default(now())
  register    Register @relation(fields: [registerId], references: [id])
  student     Student  @relation(fields: [studentId], references: [id])
}

model ClassView {
  id      Int    @id @default(autoincrement())
  classId Int
  seat    Seat[]
  cls     Cls    @relation(fields: [classId], references: [id])
}

model Seat {
  id            Int       @id @default(autoincrement())
  classViewId   Int
  studentId     Int
  coordinates_X Float
  coordinates_y Float
  ClassView     ClassView @relation(fields: [classViewId], references: [id])
}

model Layout {
  id           Int           @id @default(autoincrement())
  name         String
  desks        Desk[]
  seatingPlans SeatingPlan[]
  classes      Cls[]         @relation("ClassLayouts")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Desk {
  id                 Int                  @id @default(autoincrement())
  layoutId           Int
  layout             Layout               @relation(fields: [layoutId], references: [id])
  x                  Float
  y                  Float
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  SeatingArrangement SeatingArrangement[]

  @@index([layoutId])
}

model SeatingPlan {
  id                 Int                  @id @default(autoincrement())
  name               String               @default("")
  layoutId           Int
  classId            Int                  @default(1)
  cls                Cls                  @relation(fields: [classId], references: [id])
  layout             Layout               @relation(fields: [layoutId], references: [id])
  seatingArrangement SeatingArrangement[] // Relation to SeatingArrangement model
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
}

model SeatingArrangement {
  id            Int         @id @default(autoincrement())
  seatingPlanId Int
  seatingPlan   SeatingPlan @relation(fields: [seatingPlanId], references: [id])
  deskId        Int
  desk          Desk        @relation(fields: [deskId], references: [id])
  studentId     Int
  student       Student     @relation(fields: [studentId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@unique([seatingPlanId, deskId, studentId]) // Ensure unique assignment in seating plan
}
